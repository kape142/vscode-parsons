{
    "name": "Ã˜ving 3 - Card",
    "files": [
        {
            "name": "Card.java",
            "text": "public class Card {\r\n    \r\n    private char suit;\r\n    private int face = -1;\r\n    public final static String SUITS = \"SHDC\";\r\n    \r\n    public Card(char suit, int face) {\r\n        if (SUITS.indexOf(suit) < 0) {\r\n            throw new IllegalArgumentException(\"Illegal suit: \" + suit);\r\n        }\r\n        if (face < 1 || face > 13) {\r\n            throw new IllegalArgumentException(\"Illegal face: \" + face);\r\n        }\r\n        this.suit = suit;\r\n        this.face = face;\r\n    }\r\n    \r\n    public String toString() {\r\n        $parson{CardToString};\r\n    }\r\n\r\n    public char getSuit() {\r\n        return this.suit;\r\n    }\r\n    \r\n    public int getFace() {\r\n        return this.face;\r\n    }\r\n}\r\n",
            "gaps": [
                {
                    "id": "CardToString",
                    "width": 70,
                    "type": "dragdrop"
                }
            ]
        },
        {
            "name": "CardDeck.java",
            "text": "import java.util.ArrayList;\r\n\r\npublic class CardDeck {\r\n    \r\n    private ArrayList<Card> cards;\r\n\r\n    public CardDeck(int suitSize) {\r\n        cards = new ArrayList<Card>();\r\n        for (int i = 0; i < Card.SUITS.length(); i++) {\r\n            for (int face = 1; face <= suitSize; face++) {\r\n                Card card = new Card(Card.SUITS.charAt(i), face);\r\n                cards.add(card);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        $parson{CardDeckToString};\r\n    }\r\n\r\n    public int getCardCount() {\r\n        return $parson{cardCount};\r\n    }\r\n    \r\n    public Card getCard(int i) {\r\n        if (i < 0 || i >= getCardCount()) {\r\n            throw new IllegalArgumentException(String.format(\"%s is an illegal card index, when the size of the deck is %s\", i, getCardCount()));\r\n        }\r\n        return $parson{getCard};\r\n    }\r\n    \r\n    public void shufflePerfectly() {\r\n        int halfSize = cards.size() / 2;\r\n        for (int i = 0; i < halfSize; i++) {\r\n            Card card = cards.remove(halfSize + i);\r\n            cards.add(i * 2 + 1, card);\r\n        }\r\n    }\r\n}\r\n",
            "gaps": [
                {
                    "id": "cardCount",
                    "width": 25,
                    "type": "dragdrop"
                },
                {
                    "id": "getCard",
                    "width": 25,
                    "type": "dragdrop"
                },
                {
                    "id": "CardDeckToString",
                    "width": 70,
                    "type": "dragdrop"
                }
            ]
        }
    ],
    "snippets": [
        {
            "text": "cards.size()",
            "id": 0
        },
        {
            "text": "cards.length",
            "id": 1
        },
        {
            "text": "cards.get(i)",
            "id": 2
        },
        {
            "text": "cards[i]",
            "id": 3
        },
        {
            "text": "return String.valueOf(suit) + face",
            "id": 4
        },
        {
            "text": "return \"[Deck \" + cards.toString().substring(1)",
            "id": 5
        }
    ]
}